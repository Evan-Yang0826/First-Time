
[C文件格式]

/****************************************Copyright (c)******************************************
**
**          懿航工作室   Copyright(C) 2011, Yehhon ,All rights reserved.
**
**-------------------------------------文件信息--------------------------------------------
  **  文 件 名: 
  **  描    述: 
  **  创 建 人:    
**--------------------------------------------------------------------------------------------
  **  修改历史:
  **  <修改时间> <修改人> <修改内容> 
************************************************************************************************/

#define XXX_LOCAL

//***********************************************************************************************
//本模块使用的变量在C文件中定义，提供给模块外部的资源在头文件中定义。
//本地函数申明 全部加 static
//本地变量申明 全部加 static
//***********************************************************************************************



/*************************************************************************************************
** 函数名称: 
** 功能描述: 
** 输　  入:    无
** 输　  出:    无     
** 返 回 值:    无
** 先决条件: 
** 全局变量: 
** 调用模块: 
**--------------------------------------------------------------------------------------------
** 修改记录:
** <修改时间> <修改人> <修改内容> 
*************************************************************************************************/

//************************************************************************************************




/************************************************************************************************
						                 END FILE
************************************************************************************************/




[头文件格式]

/****************************************Copyright (c)******************************************
**
**          懿航工作室   Copyright(C) 2011, Yehhon ,All rights reserved.
**
**-------------------------------------文件信息--------------------------------------------
  **  文 件 名: 
  **  描    述: 
  **  创 建 人:
  **  范围性质:全局性头文件,半全局头性文件,私有性头文件    
**--------------------------------------------------------------------------------------------
  **  修改历史:
  **  <修改时间> <修改人> <修改内容> 
************************************************************************************************/
#ifndef  __XXX_H__ 
#define  __XXX_H__ 


  /* 全局预定义 */



  /* 本地预定义 */
  #ifdef XXX_LOCAL 

    /* 引用的外部资源声明 */

  	
    #define  EXT_XXX  

  /* 外部预定义 */
  #else  

    #define  EXT_XXX extern

  /* 结束预定义 */
  #endif   




  /* 对外输出的资源定义与声明 */


#endif  /* __XXX_H__ */



/************************************************************************************************
						                 END FILE
************************************************************************************************/


【资源头文件】
　.将资源分配定义成宏，写在单独的头文件里面，如存储空间分配，外部引脚分配。


【外设寄存器结构】
　.外设寄存器的状态、数据、控制寄存器可以定义在一个数据结构体内。


【理想的设计特征】

  .最小的复杂度
  .易于维护
  .松散耦合
  .可扩展性
  .可重用性
  .高扇入
  .低扇出
  .可移植性
  .精简性
  .层次性
  .标准技术


【标识符命名】

    .对于变量命名，禁止取单个字符（如i、j、k...），建议除了要有具体含义外，还能表明其变量类型、数据类型等，但i、j、k作局部循环变量是允许的。

    .缩写
      temp 可缩写为  tmp  
      flag 可缩写为  flg  
      statistic 可缩写为  stat
      increment 可缩写为  inc  
      message 可缩写为  msg 

　　.反义词组。
      add / remove                     begin / end        
      create / destroy                 insert / delete        
      first / last                     get / release
      increment / decrement            put / get
      add / delete                     lock / unlock       
      open / close                     min / max             
      old / new                        start / stop
      next / previous                  source / target        
      show / hide                      send / receive     
      source / destination             cut / paste        
      up / down


【变量的作用域规则】
  .首先使用常量，然后才是变量。
  .变量的使用优先级：局部变量->函数范围内静态变量->模块范围内的静态变量-全局变量
　　　　　　　　　

【函数、过程】
  .检查函数所有参数输入的有效性。
  .设计高扇入、合理扇出（小于7）的函数。
  .仔细分析模块的功能及性能需求，并进一步细分，同时若有必要画出有关数据流图，据此来进行模块的函数划分与组织。根据模块的功能图或/及数据流图映射出函数结构是常用方法之一。


【程序效率】
  .在保证软件系统的正确性、稳定性、可读性及可测性的前提下，提高代码效率。
  .循环体内工作量最小化。在多重循环中，应将最忙的循环放在最内层。避免循环体内含判断语句，应将循环语句置于判断语句的代码块之中。
  .仔细分析有关算法，并进行优化。
  .要仔细地构造或直接用汇编编写调用频繁或性能要求极高的函数。
  .尽量用乘法或其它方法代替除法，特别是浮点运算中的除法。


【质量保证】
  .代码质量保证优先原则
     （1）正确性，指程序要实现设计要求的功能。
     （2）稳定性、安全性，指程序稳定、可靠、安全。
     （3）可测试性，指程序要具有良好的可测试性。
     （4）规范/可读性，指程序书写风格、命名规则等要符合规范。
     （5）全局效率，指软件系统的整体效率。
     （6）局部效率，指某个模块/子模块/函数的本身效率。
     （7）个人表达方式/个人方便性，指个人编程习惯。


【代码测试、维护】
  .坚持在编码阶段就对代码进行彻底的单元测试，不要等以后的测试工作来发现问题。


【多人合作】
　1.本模块对外部的引用处理：先把所有的引用原型在XXXIF.c模拟实现，然后再到ＸＸＸIF.h中声明，变量可以在XXXIF.h中定义。在集成时，用其它模块的原型代替模拟。
  2.公共资源管理：使用公共资源时要注册，修改时要有日志。




